#ifndef INCLUDE_QUICKFONT_SDL2_H_
#define INCLUDE_QUICKFONT_SDL2_H_

#define QFSDL2_NUM_GLYPHS 95
#define QFSDL2_GLYPH_WIDTH 6
#define QFSDL2_GLYPH_HEIGHT 11

static const char qfsdl2__data[QFSDL2_NUM_GLYPHS][QFSDL2_GLYPH_WIDTH*QFSDL2_GLYPH_HEIGHT + 1] = { // + 1 to include null terminator
    {"000000000000000000000000000000000000000000000000000000000000000000"},
    {"000000000000001000001000001000001000001000000000001000000000000000"},
    {"000000010100010100010100000000000000000000000000000000000000000000"},
    {"000000000000000000010100111110010100111110010100000000000000000000"},
    {"000000001000011100101010101000011100001010101010011100001000000000"},
    {"000000000000010010101010010100001000010100101010100100000000000000"},
    {"000000000000011000100100101000010000101010100100011010000000000000"},
    {"000000001000001000001000000000000000000000000000000000000000000000"},
    {"000000000100001000001000010000010000010000001000001000000100000000"},
    {"000000010000001000001000000100000100000100001000001000010000000000"},
    {"000000000000000000001000101010011100101010001000000000000000000000"},
    {"000000000000000000001000001000111110001000001000000000000000000000"},
    {"000000000000000000000000000000000000000000001100001100000100001000"},
    {"000000000000000000000000000000111110000000000000000000000000000000"},
    {"000000000000000000000000000000000000000000001100001100000000000000"},
    {"000000000010000010000100000100001000001000010000010000100000100000"},
    {"000000000000011100100010100110101010110010100010011100000000000000"},
    {"000000000000001000011000001000001000001000001000011100000000000000"},
    {"000000000000011100100010000010000100001000010000111110000000000000"},
    {"000000000000011100100010000010001100000010100010011100000000000000"},
    {"000000000000000100001100010100100100111110000100001110000000000000"},
    {"000000000000111110100000111100000010000010100010011100000000000000"},
    {"000000000000011100100000111100100010100010100010011100000000000000"},
    {"000000000000111110000010000010000100001000001000001000000000000000"},
    {"000000000000011100100010100010011100100010100010011100000000000000"},
    {"000000000000011100100010100010100010011110000010011100000000000000"},
    {"000000000000000000001100001100000000000000001100001100000000000000"},
    {"000000000000000000001100001100000000000000001100001100000100001000"},
    {"000000000000000010000100001000010000001000000100000010000000000000"},
    {"000000000000000000000000111110000000111110000000000000000000000000"},
    {"000000000000010000001000000100000010000100001000010000000000000000"},
    {"000000000000011100100010000010000100001000000000001000000000000000"},
    {"000000000000011100100010101110101010101110100000011110000000000000"},
    {"000000000000011100100010100010111110100010100010100010000000000000"},
    {"000000000000111100100010100010111100100010100010111100000000000000"},
    {"000000000000011100100010100000100000100000100010011100000000000000"},
    {"000000000000111100100010100010100010100010100010111100000000000000"},
    {"000000000000111110100000100000111100100000100000111110000000000000"},
    {"000000000000111110100000100000111100100000100000100000000000000000"},
    {"000000000000011100100010100000100110100010100010011100000000000000"},
    {"000000000000100010100010100010111110100010100010100010000000000000"},
    {"000000000000011100001000001000001000001000001000011100000000000000"},
    {"000000000000000010000010000010000010100010100010011100000000000000"},
    {"000000000000100010100100101000110000101000100100100010000000000000"},
    {"000000000000100000100000100000100000100000100000111110000000000000"},
    {"000000000000100010110110101010100010100010100010100010000000000000"},
    {"000000000000110010110010101010101010101010100110100110000000000000"},
    {"000000000000011100100010100010100010100010100010011100000000000000"},
    {"000000000000111100100010100010111100100000100000100000000000000000"},
    {"000000000000011100100010100010100010100010100010011100000010000000"},
    {"000000000000111100100010100010111100100010100010100010000000000000"},
    {"000000000000011100100010100000011100000010100010011100000000000000"},
    {"000000000000111110001000001000001000001000001000001000000000000000"},
    {"000000000000100010100010100010100010100010100010011100000000000000"},
    {"000000000000100010100010100010010100010100001000001000000000000000"},
    {"000000000000100010100010100010101010101010010100010100000000000000"},
    {"000000000000100010100010010100001000010100100010100010000000000000"},
    {"000000000000100010100010100010010100001000001000001000000000000000"},
    {"000000000000111110000010000100001000010000100000111110000000000000"},
    {"000000011100010000010000010000010000010000010000010000011100000000"},
    {"000000100000100000010000010000001000001000000100000100000010000010"},
    {"000000011100000100000100000100000100000100000100000100011100000000"},
    {"000000001000010100100010000000000000000000000000000000000000000000"},
    {"000000000000000000000000000000000000000000000000111111000000000000"},
    {"000000010000001000000100000000000000000000000000000000000000000000"},
    {"000000000000000000000000011110100010100010100110011010000000000000"},
    {"000000000000100000100000111100100010100010100010111100000000000000"},
    {"000000000000000000000000011100100010100000100000011110000000000000"},
    {"000000000000000010000010011110100010100010100010011110000000000000"},
    {"000000000000000000000000011100100010111110100000011110000000000000"},
    {"000000000000001100010000010000111000010000010000010000000000000000"},
    {"000000000000000000000000011110100010100010100010011110000010011100"},
    {"000000000000100000100000111100100010100010100010100010000000000000"},
    {"000000000000001000000000011000001000001000001000001100000000000000"},
    {"000000000000001000000000011000001000001000001000001000001000110000"},
    {"000000000000100000100000100100101000111000100100100010000000000000"},
    {"000000000000011000001000001000001000001000001000001100000000000000"},
    {"000000000000000000000000111100101010101010101010101010000000000000"},
    {"000000000000000000000000101100110010100010100010100010000000000000"},
    {"000000000000000000000000011100100010100010100010011100000000000000"},
    {"000000000000000000000000111100100010100010100010111100100000100000"},
    {"000000000000000000000000011110100010100010100010011110000010000010"},
    {"000000000000000000000000101100110010100000100000100000000000000000"},
    {"000000000000000000000000011110100000011100000010111100000000000000"},
    {"000000000000001000001000011110001000001000001000000110000000000000"},
    {"000000000000000000000000100010100010100010100110011010000000000000"},
    {"000000000000000000000000100010100010010100010100001000000000000000"},
    {"000000000000000000000000100010101010101010101010010100000000000000"},
    {"000000000000000000000000100010010100001000010100100010000000000000"},
    {"000000000000000000000000100010100010100010100010011110000010011100"},
    {"000000000000000000000000111110000100001000010000111110000000000000"},
    {"000000000110001000001000001000110000001000001000001000000110000000"},
    {"000000001000001000001000001000001000001000001000001000001000001000"},
    {"000000110000001000001000001000000110001000001000001000110000000000"},
    {"000000000000000000000000011010101100000000000000000000000000000000"},
};

static SDL_Rect *qfsdl2__get_text_rects(int x, int y, int scale, const char *text, int *num, SDL_Rect *bb) {
    if (scale < 1) {
        scale = 1;
    }
    
    int at_x = x;
    int at_y = y;

    if (bb) {
        bb->x = x;
        bb->y = y;
        bb->w = 0;
        bb->h = 0;
    }

    int text_len = (int)SDL_strlen(text);

    // we are caching the allocation here; no need to spam SDL_malloc every time we call this function
    // it should be fine to use static here because SDL_Renderer is not thread-safe anyway
    static int cached_max_possible_rects = 0;
    static SDL_Rect *rects = 0;

    int max_possible_rects = text_len * QFSDL2_GLYPH_WIDTH * QFSDL2_GLYPH_HEIGHT;
    if (cached_max_possible_rects < max_possible_rects) {
        SDL_free(rects);
        rects = (SDL_Rect *)SDL_malloc(sizeof(SDL_Rect) * max_possible_rects);
        cached_max_possible_rects = max_possible_rects;
    }
    
    int num_rects = 0;

    for (int i = 0; i < text_len; ++i) {
        char c = text[i];

        if (i == 0 && bb) {
            bb->h = QFSDL2_GLYPH_HEIGHT * scale;
        }

        if ((c < ' ' || c > '~') && (c != '\n')) {
            // if not a visible ascii character, just render a space instead
            c = ' ';
        }
        
        if (c == '\n') {
            int adv = QFSDL2_GLYPH_HEIGHT * scale;
            at_x = x;
            at_y += adv;
            if (bb) {
                bb->h += adv;
            }
        } else {
            for (int gy = 0; gy < QFSDL2_GLYPH_HEIGHT; ++gy) {
                for (int gx = 0; gx < QFSDL2_GLYPH_WIDTH; ++gx) {
                    char pix = qfsdl2__data[c - ' '][gy*QFSDL2_GLYPH_WIDTH + gx];
                    if (pix != '0') {
                        SDL_Rect rect;
                        rect.w = scale;
                        rect.h = scale;
                        rect.x = at_x + gx*scale;
                        rect.y = at_y + gy*scale;
                        rects[num_rects++] = rect;
                    }
                }
            }
            at_x += QFSDL2_GLYPH_WIDTH * scale;
            if (bb && ((at_x - x) > bb->w)) {
                bb->w = at_x - x;
            }
        }
    }
    
    *num = num_rects;
    return rects;
}

static void qfsdl2_render_text(SDL_Renderer *renderer, const char *text, int x, int y, int scale) {
    int num_rects = 0;
    SDL_Rect *rects = qfsdl2__get_text_rects(x, y, scale, text, &num_rects, 0);
    SDL_RenderFillRects(renderer, rects, num_rects);
}

static void qfsdl2_surface_render_text(SDL_Surface *surface, const char *text, int x, int y, int scale, Uint32 color) {
    int num_rects = 0;
    SDL_Rect *rects = qfsdl2__get_text_rects(x, y, scale, text, &num_rects, 0);
    SDL_FillRects(surface, rects, num_rects, color);
}

static SDL_Rect qfsdl2_get_text_bounding_box(char *text, int x, int y, int scale) {
    SDL_Rect bb = {0};
    int num_rects = 0;
    SDL_Rect *rects = qfsdl2__get_text_rects(x, y, scale, text, &num_rects, &bb);
    return bb;
}

#endif
